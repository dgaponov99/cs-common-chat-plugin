/* Plugin generated by AMXX-Studio */
 
#include <amxmodx>
#include <amxmisc>
//#include <core>
#include <grip>

/*
	За основу взят плагин Telegram MSG 1.2.0 by ex3m777
	
	Для работы вставьте соответсвующее *параметры* в g_URL, vk_URL и vk_admin_URL
*/


//#define SLEEP_TIME          // закомментируйте если вам не нужен ночной режим, когда сообщения не будут приходить

#if defined SLEEP_TIME
const g_Start_Time = 00       // Время начала ночного режима
const g_End_Time = 10         // Время конца ночного режима
#endif


new const DELAY = 10;   // Анти-спам в секундах. 
new const g_URL[] = "https://api.telegram.org/*TG_TOKEN*/sendmessage?chat_id=*TG_CHAT_ID*&text=";
new const vk_URL[] = "https://api.vk.com/method/messages.send?access_token=*VK_TOKEN*&v=5.131&peer_id=*VK_PEER_ID*&random_id="
new const vk_admin_URL[] = "https://api.vk.com/method/messages.send?access_token=*VK_TOKEN*&v=5.131&peer_id=*VK_ADMIN_PEER_ID*&random_id="
new Float:g_flNextTime[33];
new const LANG_NAME[] = "telegram.txt"

public plugin_init() {
    register_plugin("cs-common-chat", "1.0.0", "dgaponov99");
    register_clcmd("say /all","message");
    register_clcmd("say_team /all", "message");
    register_clcmd("All","CommandMessage");
    
    register_clcmd("say /admchat","adminMessage");
    register_clcmd("say_team /admchat", "adminMessage");
    register_clcmd("AdminChat","CommandMessageAdmin");
    
    register_concmd("send_message_rcon", "sendMessageRcon", ADMIN_RCON, "<source>, <sender>, <message>");
    register_dictionary(LANG_NAME);
}

public sendMessageRcon(id, level, cid)
{
	if (!cmd_access(id, level, cid, 3))
		return PLUGIN_HANDLED

	new source[10], sender[MAX_NAME_LENGTH], message[192]
	new name[MAX_NAME_LENGTH], authid[32], userid
	
	read_argv(1, source, charsmax(source))
	remove_quotes(source)
	
	read_argv(2, sender, charsmax(sender))
	remove_quotes(sender)
	
	read_argv(3, message, charsmax(message))
	remove_quotes(message)
	
	get_user_authid(id, authid, charsmax(authid))
	get_user_name(id, name, charsmax(name))
	userid = get_user_userid(id)
	
	client_print_color(0, print_team_grey, "^1[^4%s^1] ^3%s^4 :  ^1%s", source, sender, message);
	
	log_amx("Chat: ^"%s<%d><%s><>^" say ^"%s^"", name, userid, authid, message)
	log_message("^"%s<%d><%s><>^" triggered ^"amx_say^" (text ^"%s^")", name, userid, authid, message)
	
	return PLUGIN_HANDLED
}


public HandleRequest() {
    new GripResponseState:responseState = grip_get_response_state();
    if (responseState == GripResponseStateError) {
        return;
    }

    new GripHTTPStatus:status = grip_get_response_status_code();
    if (status != GripHTTPStatusCreated) {
        return;
    }
}


public message(id) {
    #if defined SLEEP_TIME
    static CurHour; time(CurHour);
    if(g_Start_Time <= CurHour && CurHour < g_End_Time) {
        client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_SLEEP");
        return PLUGIN_HANDLED;
    }
    #endif

    if(g_flNextTime[id] > get_gametime()) {
        client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_SPAM");
        return PLUGIN_HANDLED;
    }

    client_cmd(id,"messagemode All");
    client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_ENTER");

    g_flNextTime[id] = get_gametime() + DELAY;
    return PLUGIN_CONTINUE;

}

public adminMessage(id) {
    #if defined SLEEP_TIME
    static CurHour; time(CurHour);
    if(g_Start_Time <= CurHour && CurHour < g_End_Time) {
        client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_SLEEP");
        return PLUGIN_HANDLED;
    }
    #endif

    if(g_flNextTime[id] > get_gametime()) {
        client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_SPAM");
        return PLUGIN_HANDLED;
    }

    client_cmd(id,"messagemode AdminChat");

    g_flNextTime[id] = get_gametime() + DELAY;
    return PLUGIN_CONTINUE;

}
 

public CommandMessage(id) {
    new Args[256], text[512], vk_text[512]
    read_args(Args, charsmax(Args));
    remove_quotes(Args);

    if(strlen(Args) < 1) {
        return;
    }

    new GripBody:body = grip_body_from_string("{^"title^": ^"foo^", ^"body^": ^"bar^", ^"userId^": 1}");
    new GripRequestOptions:options = grip_create_default_options();
    grip_options_add_header(options, "Content-Type", "application/json");
    grip_options_add_header(options, "User-Agent", "Grip");

    formatex(text, charsmax(text), "%s[CS] %n: %s", g_URL, id, Args);
    formatex(vk_text, charsmax(vk_text), "%s%d&message=[CS] %n: %s", vk_URL, random(4294967295), id, Args);

    grip_request(text,  body, GripRequestTypePost, "HandleRequest", options);
    grip_request(vk_text,  body, GripRequestTypePost, "HandleRequest", options);
    grip_destroy_body(body);
    grip_destroy_options(options);
    client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_OK");
    client_print_color(0, print_team_grey, "^1[^4%l^1] ^3%n ^4: ^1%s", "TG_ALL", id, Args);

    static sAuth[25];
    get_user_authid(id, sAuth, charsmax(sAuth));

    log_to_file("telegram.log", "Игрок [%n] [%s] отправил сообщение: %s", id, sAuth, Args);
}

public CommandMessageAdmin(id) {
    new Args[256], text[512], vk_text[512]
    read_args(Args, charsmax(Args));
    remove_quotes(Args);

    if(strlen(Args) < 1) {
        return;
    }

    new GripBody:body = grip_body_from_string("{^"title^": ^"foo^", ^"body^": ^"bar^", ^"userId^": 1}");
    new GripRequestOptions:options = grip_create_default_options();
    grip_options_add_header(options, "Content-Type", "application/json");
    grip_options_add_header(options, "User-Agent", "Grip");

    new player_authid[37] 
    get_user_authid(id, player_authid, charsmax(player_authid)) 
    
    formatex(text, charsmax(text), "[%s] %n: %s", player_authid, id, Args);
    
    formatex(vk_text, charsmax(vk_text), "%s%d&message=%s", vk_admin_URL, random(4294967295), text);

    grip_request(vk_text,  body, GripRequestTypePost, "HandleRequest", options);
    grip_destroy_body(body);
    grip_destroy_options(options);
    
    new sayAdmin[512]
    formatex(sayAdmin, charsmax(sayAdmin), "say_team ^"@ %s^"", Args);
    client_cmd(id,sayAdmin);
    client_print_color(id, print_team_default, "%l %l", "TG_TAG", "TG_OK");

    static sAuth[25];
    get_user_authid(id, sAuth, charsmax(sAuth));

    log_to_file("telegram.log", "Игрок [%n] [%s] отправил сообщение: %s", id, sAuth, Args);
}
